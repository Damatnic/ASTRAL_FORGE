// Astral Power - Enhanced Data Model with Progressive Overload & Autoregulation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER & AUTHENTICATION
// ============================================================================

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile            UserProfile?
  sessions           WorkoutSession[]
  fatigueMetrics     FatigueMetric[]
  achievements       Achievement[]
  streaks            Streak?
  bodyMetrics        BodyMetric[]
  workoutNotes       WorkoutNote[]
  exerciseNotes      ExerciseNote[]
  progressPhotos     ProgressPhoto[]
  exerciseRatings    ExerciseRating[]
  injuries           Injury[]
  workoutTemplates   WorkoutTemplate[]
  nutritionLogs      NutritionLog[]
  customExercises    CustomExercise[]
  exerciseRestTimers ExerciseRestTimer[]
  goals              Goal[]
  workoutPrograms    WorkoutProgram[]
  userEquipment      UserEquipment[]
  plateInventory     PlateInventory[]
  userUnlocks        UserUnlock[]
  guildMemberships   GuildMember[]
  guildActivities    GuildActivity[]
  createdGuilds      Guild[]           @relation("GuildCreator")
  initiatedDuels     Duel[]            @relation("DuelChallenger")
  receivedDuels      Duel[]            @relation("DuelOpponent")
  duelParticipations DuelParticipant[]
  pvpRank            PvPRank?

  @@map("users")
}

model UserProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  level               String   @default("beginner") // beginner | intermediate | advanced
  goals               Json? // strength, hypertrophy, endurance
  preferences         Json? // unit system, notification settings
  spotifyAccessToken  String?
  spotifyRefreshToken String?
  spotifyPlaylistId   String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// ============================================================================
// EXERCISES & PROGRESSIONS
// ============================================================================

model Exercise {
  id          String   @id @default(cuid())
  name        String
  category    String // compound | isolation | accessory
  muscleGroup String // legs | push | pull | core
  equipment   String? // barbell | dumbbell | machine | bodyweight
  description String?
  videoUrl    String?
  createdAt   DateTime @default(now())

  progressionRules ProgressionRule[]
  sets             SetEntry[]
  exerciseNotes    ExerciseNote[]
  ratings          ExerciseRating[]
  equipmentLinks   ExerciseEquipment[]

  @@map("exercises")
}

model ProgressionRule {
  id         String   @id @default(cuid())
  exerciseId String
  userLevel  String // beginner | intermediate | advanced
  algorithm  String // linear | undulating | autoregulated
  parameters Json // Algorithm-specific params (increment, deload %, etc)
  createdAt  DateTime @default(now())

  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([exerciseId, userLevel])
  @@map("progression_rules")
}

// ============================================================================
// WORKOUT SESSIONS & SETS
// ============================================================================

model WorkoutSession {
  id               String   @id @default(cuid())
  userId           String
  date             DateTime @default(now())
  name             String?
  completed        Boolean  @default(false)
  duration         Int? // minutes
  plan             Json? // Generated workout plan
  globalAdjustment Float? // Fatigue-based adjustment (0.7-1.2)
  notes            String?

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sets         SetEntry[]
  workoutNotes WorkoutNote[]

  @@index([userId, date])
  @@map("workout_sessions")
}

model SetEntry {
  id         String   @id @default(cuid())
  sessionId  String
  exerciseId String
  setNumber  Int
  weight     Float
  reps       Int
  rpe        Float? // 6-10 scale with 0.5 increments
  rir        Int? // Reps in Reserve
  velocity   Float? // Bar speed (m/s)
  tempo      String? // e.g., "2-0-2-0"
  completed  Boolean  @default(true)
  timestamp  DateTime @default(now())
  notes      String?
  isFailure  Boolean  @default(false) // Sprint 6: Track sets taken to failure
  isWarmup   Boolean  @default(false) // Sprint 6: Mark warmup sets

  session       WorkoutSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  exercise      Exercise        @relation(fields: [exerciseId], references: [id])
  rpeHistory    RPEHistory[]
  videoAnalysis VideoAnalysis[]

  @@index([sessionId, exerciseId])
  @@map("set_entries")
}

// ============================================================================
// RPE & AUTOREGULATION
// ============================================================================

model RPEHistory {
  id           String   @id @default(cuid())
  setId        String
  predictedRIR Int // What user thought before set
  actualRIR    Int? // Video analysis or self-reported after
  velocity     Float? // Bar speed if tracked
  timestamp    DateTime @default(now())

  set SetEntry @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@map("rpe_history")
}

model VideoAnalysis {
  id         String   @id @default(cuid())
  setId      String
  videoUrl   String
  formScore  Float // 0-100
  rangeScore Float // 0-100 (depth/ROM)
  tempo      String // Actual tempo measured
  flags      Json // Form breakdown points
  createdAt  DateTime @default(now())

  set SetEntry @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@map("video_analyses")
}

// ============================================================================
// FATIGUE MANAGEMENT
// ============================================================================

model FatigueMetric {
  id           String   @id @default(cuid())
  userId       String
  date         DateTime @default(now())
  acuteLoad    Float? // 7-day rolling average
  chronicLoad  Float? // 28-day rolling average
  acuteChronic Float? // Ratio (sweet spot: 0.8-1.3)
  hrv          Float? // Heart rate variability
  sleepQuality Int? // 1-10 scale
  stress       Int? // 1-10 scale
  soreness     Json? // Per muscle group

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date], name: "userId_date")
  @@index([userId, date])
  @@map("fatigue_metrics")
}

// ============================================================================
// HABIT FORMATION & ACCOUNTABILITY
// ============================================================================

model Streak {
  id          String    @id @default(cuid())
  userId      String    @unique
  current     Int       @default(0)
  longest     Int       @default(0)
  lastWorkout DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("streaks")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String // pr | streak | volume | consistency
  title       String
  description String
  earnedAt    DateTime @default(now())
  metadata    Json? // Exercise name, weight, reps, etc

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@map("achievements")
}

model UserUnlock {
  id         String   @id @default(cuid())
  userId     String
  type       String // 'template' | 'feature' | 'title'
  identifier String // Name/ID of what was unlocked
  source     String? // 'quest' | 'tier' | 'achievement'
  unlockedAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, type, identifier])
  @@index([userId])
  @@map("user_unlocks")
}

// ============================================================================
// BODY METRICS & TRACKING
// ============================================================================

model BodyMetric {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  weight    Float?
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  thighs    Float?
  arms      Float?
  shoulders Float?
  neck      Float?
  calves    Float?
  forearms  Float?
  notes     String?
  photoUrls Json?    @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date(sort: Desc)])
  @@map("body_metrics")
}

model WorkoutNote {
  id           String   @id @default(cuid())
  sessionId    String
  userId       String
  content      String
  energyLevel  Int? // 1-10 scale
  sleepQuality Int? // 1-10 scale
  stress       Int? // 1-10 scale
  nutrition    String?
  createdAt    DateTime @default(now())

  session WorkoutSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([userId])
  @@map("workout_notes")
}

model ExerciseNote {
  id         String   @id @default(cuid())
  userId     String
  exerciseId String
  content    String
  noteType   String // 'form_issue', 'pain_point', 'general'
  severity   Int? // 1-10 scale for pain points
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([userId, exerciseId])
  @@index([createdAt(sort: Desc)])
  @@map("exercise_notes")
}

model ProgressPhoto {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  photoUrl  String
  photoType String // 'front', 'back', 'side'
  weight    Float?
  bodyFat   Float?
  notes     String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date(sort: Desc)])
  @@map("progress_photos")
}

model ExerciseRating {
  id         String   @id @default(cuid())
  userId     String
  exerciseId String
  rating     Int // 1-5 stars
  isFavorite Boolean  @default(false)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId])
  @@index([userId])
  @@index([isFavorite])
  @@map("exercise_ratings")
}

model Injury {
  id                String    @id @default(cuid())
  userId            String
  name              String
  bodyPart          String
  severity          String // 'minor', 'moderate', 'severe'
  status            String    @default("active") // 'active', 'recovering', 'healed'
  dateOccurred      DateTime
  dateHealed        DateTime?
  notes             String?
  affectedExercises String[] // Array of exercise IDs
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@map("injuries")
}

model WorkoutTemplate {
  id              String   @id @default(cuid())
  userId          String?
  name            String
  description     String?
  durationMinutes Int
  difficulty      String // 'beginner', 'intermediate', 'advanced'
  isPublic        Boolean  @default(false)
  exercises       Json // Array of {exerciseId, sets, reps, weight}
  tags            String[] // 'quick', 'strength', 'cardio'
  createdAt       DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([durationMinutes])
  @@index([isPublic])
  @@map("workout_templates")
}

model NutritionLog {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  calories  Float?
  protein   Float?
  carbs     Float?
  fats      Float?
  waterMl   Float?
  notes     String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date(sort: Desc)])
  @@map("nutrition_logs")
}

model CustomExercise {
  id                 String   @id @default(cuid())
  userId             String
  name               String
  category           String
  muscleGroup        String
  equipment          String?
  description        String?
  videoUrl           String?
  customInstructions String?
  isPublic           Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPublic])
  @@map("custom_exercises")
}

model ExerciseRestTimer {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  restSeconds Int
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId])
  @@index([userId])
  @@map("exercise_rest_timers")
}

model Goal {
  id           String    @id @default(cuid())
  userId       String
  title        String
  description  String?
  goalType     String // 'strength', 'weight', 'body_composition', 'performance', 'habit'
  targetValue  Float?
  currentValue Float?
  unit         String? // 'kg', 'lbs', '%', 'reps', 'days'
  deadline     DateTime?
  status       String    @default("active") // 'active', 'completed', 'abandoned'
  completedAt  DateTime?
  milestones   Json? // Array of {value, date, note}
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@map("goals")
}

// ============================================================================
// WORKOUT PROGRAMS
// ============================================================================

model WorkoutProgram {
  id              String   @id @default(cuid())
  userId          String
  name            String
  description     String?
  category        String // 'powerlifting', 'bodybuilding', 'athletic', 'specialization'
  difficulty      String // 'beginner', 'intermediate', 'advanced'
  daysPerWeek     Int
  weeksTotal      Int?
  progressionType String // 'linear', 'wave', 'block', 'daily_undulating'
  trainingMaxPct  Float? // Training max as % of 1RM (e.g., 0.9 for 90%)
  deloadWeek      Int? // Which week to deload (e.g., 4 for every 4th week)
  isActive        Boolean  @default(false)
  isPublic        Boolean  @default(false)
  tags            String[] // 'strength', 'hypertrophy', 'powerlifting', etc
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises ProgramExercise[]

  @@index([userId])
  @@index([isActive])
  @@index([isPublic])
  @@map("workout_programs")
}

model ProgramExercise {
  id          String   @id @default(cuid())
  programId   String
  exerciseId  String
  dayOfWeek   Int // 1-7 (Monday-Sunday)
  weekNumber  Int? // For multi-week programs (null = all weeks)
  orderIndex  Int // Order in workout
  sets        Int
  repsMin     Int? // For rep ranges
  repsMax     Int? // For rep ranges
  repsTarget  Int? // For fixed reps
  weightPct   Float? // % of training max (null for bodyweight/accessories)
  rpe         Float? // Target RPE
  restSeconds Int? // Rest between sets
  notes       String? // "AMRAP last set", "superset with X", etc
  createdAt   DateTime @default(now())

  program WorkoutProgram @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([programId])
  @@index([programId, dayOfWeek, weekNumber])
  @@map("program_exercises")
}

// ============================================================================
// EQUIPMENT SYSTEM
// ============================================================================

model Equipment {
  id          String            @id @default(cuid())
  name        String            @unique
  category    EquipmentCategory
  description String?
  imageUrl    String?
  weight      Float? // Default weight in kg (e.g., 20 for Olympic barbell)
  isWeighted  Boolean           @default(false) // true for barbells, dumbbells, kettlebells
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  exercises ExerciseEquipment[]
  users     UserEquipment[]

  @@map("equipment")
}

model ExerciseEquipment {
  exerciseId  String
  equipmentId String
  required    Boolean  @default(true) // true = required, false = optional
  createdAt   DateTime @default(now())

  exercise  Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  equipment Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@id([exerciseId, equipmentId])
  @@map("exercise_equipment")
}

model UserEquipment {
  userId      String
  equipmentId String
  location    String   @default("default") // "home", "gym", "travel"
  quantity    Int      @default(1)
  notes       String?
  createdAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipment Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@id([userId, equipmentId, location])
  @@index([userId, location])
  @@map("user_equipment")
}

model PlateInventory {
  id        String   @id @default(cuid())
  userId    String
  weight    Float // Weight per plate in kg
  quantity  Int      @default(2) // Usually in pairs
  location  String   @default("default")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weight, location])
  @@index([userId, location])
  @@map("plate_inventory")
}

enum EquipmentCategory {
  BARBELL // Olympic barbell, EZ bar, trap bar
  DUMBBELL // Fixed, adjustable dumbbells
  MACHINE // Leg press, cable machine, smith machine
  RACK // Squat rack, power rack, half rack
  BENCH // Flat bench, adjustable bench, decline bench
  BODYWEIGHT // Pull-up bar, dip station, parallettes, rings
  CARDIO // Treadmill, bike, rower, elliptical
  ACCESSORY // Resistance bands, kettlebells, medicine ball, ab wheel
  PLATFORM // Lifting platform, deadlift platform
}

// ============================================================================
// GUILD SYSTEM
// ============================================================================

model Guild {
  id                String   @id @default(cuid())
  name              String   @unique
  tag               String   @unique // e.g., "[IRON]", max 6 chars
  description       String?
  motto             String?
  level             Int      @default(1)
  xp                Int      @default(0)
  xpForNextLevel    Int      @default(1000)
  rank              GuildRank @default(BRONZE)
  totalWorkouts     Int      @default(0)
  totalVolume       Int      @default(0) // Total kg lifted by all members
  weeklyGoal        Int      @default(100) // Weekly workout target
  weeklyProgress    Int      @default(0)
  isPublic          Boolean  @default(true)
  requiresApproval  Boolean  @default(false)
  minLevelRequired  Int      @default(1)
  maxMembers        Int      @default(20)
  icon              String   @default("⚔️")
  color             String   @default("from-gray-600 to-gray-800")
  createdById       String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  createdBy    User            @relation("GuildCreator", fields: [createdById], references: [id])
  members      GuildMember[]
  activities   GuildActivity[]
  achievements GuildAchievement[]

  @@index([rank])
  @@index([isPublic])
  @@index([level])
  @@map("guilds")
}

model GuildMember {
  id             String   @id @default(cuid())
  guildId        String
  userId         String
  role           GuildRole @default(MEMBER)
  contributedXp  Int      @default(0)
  contributedVolume Int   @default(0)
  joinedAt       DateTime @default(now())
  lastActiveAt   DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([guildId, userId])
  @@index([userId])
  @@index([guildId, role])
  @@map("guild_members")
}

model GuildActivity {
  id          String   @id @default(cuid())
  guildId     String
  userId      String
  type        GuildActivityType
  description String
  metadata    Json? // Additional data like exercise name, PR value, etc
  icon        String   @default("💪")
  timestamp   DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([guildId, timestamp(sort: Desc)])
  @@index([userId])
  @@map("guild_activities")
}

model GuildAchievement {
  id          String   @id @default(cuid())
  guildId     String
  type        String // 'first_blood', 'volume_kings', 'consistency_masters'
  title       String
  description String
  earnedAt    DateTime @default(now())
  metadata    Json? // Additional context

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@map("guild_achievements")
}

// ============================================================================
// PVP SYSTEM
// ============================================================================

model Duel {
  id            String      @id @default(cuid())
  challengerId  String
  opponentId    String
  type          DuelType
  status        DuelStatus  @default(PENDING)
  goalDescription String
  targetValue   Float
  unit          String
  icon          String      @default("⚔️")
  startDate     DateTime?
  endDate       DateTime?
  winnerId      String?
  xpReward      Int         @default(100)
  rankReward    Int         @default(25)
  titleReward   String? // Optional title for winner
  badgeReward   String? // Optional badge emoji
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  challenger   User              @relation("DuelChallenger", fields: [challengerId], references: [id], onDelete: Cascade)
  opponent     User              @relation("DuelOpponent", fields: [opponentId], references: [id], onDelete: Cascade)
  participants DuelParticipant[]

  @@index([challengerId, status])
  @@index([opponentId, status])
  @@index([status, endDate])
  @@map("duels")
}

model DuelParticipant {
  id           String   @id @default(cuid())
  duelId       String
  userId       String
  currentValue Float    @default(0)
  targetValue  Float
  progress     Float    @default(0) // Percentage 0-100
  hasCompleted Boolean  @default(false)
  completedAt  DateTime?
  updatedAt    DateTime @updatedAt

  duel Duel @relation(fields: [duelId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([duelId, userId])
  @@index([userId])
  @@map("duel_participants")
}

model PvPRank {
  id               String   @id @default(cuid())
  userId           String   @unique
  tier             String   @default("Bronze") // Bronze, Silver I-III, Gold I-III, etc
  points           Int      @default(1000)
  pointsForNextRank Int     @default(1100)
  wins             Int      @default(0)
  losses           Int      @default(0)
  draws            Int      @default(0)
  winRate          Float    @default(0)
  highestTier      String   @default("Bronze")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([points(sort: Desc)])
  @@index([tier])
  @@map("pvp_ranks")
}

// ============================================================================
// ENUMS
// ============================================================================

enum GuildRank {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
  LEGENDARY
}

enum GuildRole {
  MEMBER
  OFFICER
  LEADER
}

enum GuildActivityType {
  WORKOUT_COMPLETED
  PR_ACHIEVED
  LEVEL_UP
  MEMBER_JOINED
  MEMBER_LEFT
  ACHIEVEMENT_EARNED
  MILESTONE_REACHED
}

enum DuelType {
  VOLUME
  REPS
  TIME
  PR
  STREAK
  CUSTOM
}

enum DuelStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

// ============================================================================
// INDEXES & OPTIMIZATIONS
// ============================================================================

// Additional composite indexes for common queries
// - User workout history: already indexed via userId + date on WorkoutSession
// - Exercise progress tracking: already indexed via sessionId + exerciseId on SetEntry
// - Fatigue trending: already indexed via userId + date on FatigueMetric
// - Equipment filtering: indexed via userId + location on UserEquipment
// - Guild leaderboard: indexed via rank, level, isPublic on Guild
// - Guild activity feed: indexed via guildId + timestamp on GuildActivity
// - PvP leaderboard: indexed via points on PvPRank
// - Active duels: indexed via status + endDate on Duel
