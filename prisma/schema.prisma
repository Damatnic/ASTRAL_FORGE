// Astral Power - Enhanced Data Model with Progressive Overload & Autoregulation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER & AUTHENTICATION
// ============================================================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  profile       UserProfile?
  sessions      WorkoutSession[]
  fatigueMetrics FatigueMetric[]
  achievements  Achievement[]
  streaks       Streak?
  bodyMetrics   BodyMetric[]
  workoutNotes  WorkoutNote[]
  exerciseNotes ExerciseNote[]
  progressPhotos ProgressPhoto[]
  exerciseRatings ExerciseRating[]
  injuries Injury[]
  workoutTemplates WorkoutTemplate[]
  nutritionLogs NutritionLog[]
  customExercises CustomExercise[]
  exerciseRestTimers ExerciseRestTimer[]
  goals Goal[]
  
  @@map("users")
}

model UserProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  level         String   @default("beginner") // beginner | intermediate | advanced
  goals         Json?    // strength, hypertrophy, endurance
  preferences   Json?    // unit system, notification settings
  spotifyAccessToken  String?
  spotifyRefreshToken String?
  spotifyPlaylistId   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

// ============================================================================
// EXERCISES & PROGRESSIONS
// ============================================================================

model Exercise {
  id              String   @id @default(cuid())
  name            String
  category        String   // compound | isolation | accessory
  muscleGroup     String   // legs | push | pull | core
  equipment       String?  // barbell | dumbbell | machine | bodyweight
  description     String?
  videoUrl        String?
  createdAt       DateTime @default(now())
  
  progressionRules ProgressionRule[]
  sets            SetEntry[]
  exerciseNotes   ExerciseNote[]
  ratings         ExerciseRating[]
  
  @@map("exercises")
}

model ProgressionRule {
  id            String   @id @default(cuid())
  exerciseId    String
  userLevel     String   // beginner | intermediate | advanced
  algorithm     String   // linear | undulating | autoregulated
  parameters    Json     // Algorithm-specific params (increment, deload %, etc)
  createdAt     DateTime @default(now())
  
  exercise      Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  @@unique([exerciseId, userLevel])
  @@map("progression_rules")
}

// ============================================================================
// WORKOUT SESSIONS & SETS
// ============================================================================

model WorkoutSession {
  id            String   @id @default(cuid())
  userId        String
  date          DateTime @default(now())
  name          String?
  completed     Boolean  @default(false)
  duration      Int?     // minutes
  plan          Json?    // Generated workout plan
  globalAdjustment Float? // Fatigue-based adjustment (0.7-1.2)
  notes         String?
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sets          SetEntry[]
  workoutNotes  WorkoutNote[]
  
  @@index([userId, date])
  @@map("workout_sessions")
}

model SetEntry {
  id            String   @id @default(cuid())
  sessionId     String
  exerciseId    String
  setNumber     Int
  weight        Float
  reps          Int
  rpe           Float?   // 6-10 scale with 0.5 increments
  rir           Int?     // Reps in Reserve
  velocity      Float?   // Bar speed (m/s)
  tempo         String?  // e.g., "2-0-2-0"
  completed     Boolean  @default(true)
  timestamp     DateTime @default(now())
  notes         String?
  
  session       WorkoutSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  exercise      Exercise @relation(fields: [exerciseId], references: [id])
  rpeHistory    RPEHistory[]
  videoAnalysis VideoAnalysis[]
  
  @@index([sessionId, exerciseId])
  @@map("set_entries")
}

// ============================================================================
// RPE & AUTOREGULATION
// ============================================================================

model RPEHistory {
  id            String   @id @default(cuid())
  setId         String
  predictedRIR  Int      // What user thought before set
  actualRIR     Int?     // Video analysis or self-reported after
  velocity      Float?   // Bar speed if tracked
  timestamp     DateTime @default(now())
  
  set           SetEntry @relation(fields: [setId], references: [id], onDelete: Cascade)
  
  @@map("rpe_history")
}

model VideoAnalysis {
  id            String   @id @default(cuid())
  setId         String
  videoUrl      String
  formScore     Float    // 0-100
  rangeScore    Float    // 0-100 (depth/ROM)
  tempo         String   // Actual tempo measured
  flags         Json     // Form breakdown points
  createdAt     DateTime @default(now())
  
  set           SetEntry @relation(fields: [setId], references: [id], onDelete: Cascade)
  
  @@map("video_analyses")
}

// ============================================================================
// FATIGUE MANAGEMENT
// ============================================================================

model FatigueMetric {
  id            String   @id @default(cuid())
  userId        String
  date          DateTime @default(now())
  acuteLoad     Float?   // 7-day rolling average
  chronicLoad   Float?   // 28-day rolling average
  acuteChronic  Float?   // Ratio (sweet spot: 0.8-1.3)
  hrv           Float?   // Heart rate variability
  sleepQuality  Int?     // 1-10 scale
  stress        Int?     // 1-10 scale
  soreness      Json?    // Per muscle group
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date], name: "userId_date")
  @@index([userId, date])
  @@map("fatigue_metrics")
}

// ============================================================================
// HABIT FORMATION & ACCOUNTABILITY
// ============================================================================

model Streak {
  id            String   @id @default(cuid())
  userId        String   @unique
  current       Int      @default(0)
  longest       Int      @default(0)
  lastWorkout   DateTime?
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("streaks")
}

model Achievement {
  id            String   @id @default(cuid())
  userId        String
  type          String   // pr | streak | volume | consistency
  title         String
  description   String
  earnedAt      DateTime @default(now())
  metadata      Json?    // Exercise name, weight, reps, etc
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, type])
  @@map("achievements")
}

// ============================================================================
// BODY METRICS & TRACKING
// ============================================================================

model BodyMetric {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  weight      Float?
  bodyFat     Float?
  chest       Float?
  waist       Float?
  hips        Float?
  thighs      Float?
  arms        Float?
  shoulders   Float?
  neck        Float?
  calves      Float?
  forearms    Float?
  notes       String?
  photoUrls   Json?    @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, date(sort: Desc)])
  @@map("body_metrics")
}

model WorkoutNote {
  id           String         @id @default(cuid())
  sessionId    String
  userId       String
  content      String
  energyLevel  Int?           // 1-10 scale
  sleepQuality Int?           // 1-10 scale
  stress       Int?           // 1-10 scale
  nutrition    String?
  createdAt    DateTime       @default(now())
  
  session      WorkoutSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
  @@index([userId])
  @@map("workout_notes")
}

model ExerciseNote {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  content     String
  noteType    String   // 'form_issue', 'pain_point', 'general'
  severity    Int?     // 1-10 scale for pain points
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  @@index([userId, exerciseId])
  @@index([createdAt(sort: Desc)])
  @@map("exercise_notes")
}

model ProgressPhoto {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  photoUrl  String
  photoType String   // 'front', 'back', 'side'
  weight    Float?
  bodyFat   Float?
  notes     String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, date(sort: Desc)])
  @@map("progress_photos")
}

model ExerciseRating {
  id         String   @id @default(cuid())
  userId     String
  exerciseId String
  rating     Int      // 1-5 stars
  isFavorite Boolean  @default(false)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, exerciseId])
  @@index([userId])
  @@index([isFavorite])
  @@map("exercise_ratings")
}

model Injury {
  id               String    @id @default(cuid())
  userId           String
  name             String
  bodyPart         String
  severity         String    // 'minor', 'moderate', 'severe'
  status           String    @default("active") // 'active', 'recovering', 'healed'
  dateOccurred     DateTime
  dateHealed       DateTime?
  notes            String?
  affectedExercises String[] // Array of exercise IDs
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, status])
  @@map("injuries")
}

model WorkoutTemplate {
  id              String   @id @default(cuid())
  userId          String?
  name            String
  description     String?
  durationMinutes Int
  difficulty      String   // 'beginner', 'intermediate', 'advanced'
  isPublic        Boolean  @default(false)
  exercises       Json     // Array of {exerciseId, sets, reps, weight}
  tags            String[] // 'quick', 'strength', 'cardio'
  createdAt       DateTime @default(now())
  
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([durationMinutes])
  @@index([isPublic])
  @@map("workout_templates")
}

model NutritionLog {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  calories  Float?
  protein   Float?
  carbs     Float?
  fats      Float?
  waterMl   Float?
  notes     String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, date(sort: Desc)])
  @@map("nutrition_logs")
}

model CustomExercise {
  id                 String   @id @default(cuid())
  userId             String
  name               String
  category           String
  muscleGroup        String
  equipment          String?
  description        String?
  videoUrl           String?
  customInstructions String?
  isPublic           Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isPublic])
  @@map("custom_exercises")
}

model ExerciseRestTimer {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  restSeconds Int
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, exerciseId])
  @@index([userId])
  @@map("exercise_rest_timers")
}

model Goal {
  id            String    @id @default(cuid())
  userId        String
  title         String
  description   String?
  goalType      String    // 'strength', 'weight', 'body_composition', 'performance', 'habit'
  targetValue   Float?
  currentValue  Float?
  unit          String?   // 'kg', 'lbs', '%', 'reps', 'days'
  deadline      DateTime?
  status        String    @default("active") // 'active', 'completed', 'abandoned'
  completedAt   DateTime?
  milestones    Json?     // Array of {value, date, note}
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, status])
  @@map("goals")
}

// ============================================================================
// INDEXES & OPTIMIZATIONS
// ============================================================================

// Additional composite indexes for common queries
// - User workout history: already indexed via userId + date on WorkoutSession
// - Exercise progress tracking: already indexed via sessionId + exerciseId on SetEntry
// - Fatigue trending: already indexed via userId + date on FatigueMetric

